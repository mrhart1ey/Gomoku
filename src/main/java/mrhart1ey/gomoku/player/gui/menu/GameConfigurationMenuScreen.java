/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mrhart1ey.gomoku.player.gui.menu;

import java.util.Stack;
import javax.swing.JComponent;
import mrhart1ey.gomoku.GameConfiguration;
import mrhart1ey.gomoku.SingleTimePasser;
import mrhart1ey.gomoku.game.Gomoku;
import mrhart1ey.gomoku.game.GomokuImpl;
import mrhart1ey.gomoku.game.PlayerName;
import mrhart1ey.gomoku.timer.Clock;
import mrhart1ey.gomoku.timer.FixedTurnGameTimer;
import mrhart1ey.gomoku.timer.GameTimer;
import mrhart1ey.gomoku.timer.InfiniteGameTimer;
import mrhart1ey.gomoku.timer.StandardGameTimer;
import mrhart1ey.gomoku.timer.SystemClock;

/**
 *
 * @author josh
 */
public class GameConfigurationMenuScreen extends javax.swing.JPanel {

    private final MenuScreenTransition menuScreenTransition;
    private final JComponent followOn;
    private final Stack<JComponent> menuScreenHistory;
    private final SingleTimePasser<Thread> sessionConfigurationThreadPasser;
    private final SingleTimePasser<GameConfiguration> gameConfigPasser;

    /**
     * Creates new form GameConfigurationMenuScreen3
     */
    public GameConfigurationMenuScreen(
            MenuScreenTransition menuScreenTransition,
            JComponent followOn,
            Stack<JComponent> menuScreenHistory,
            SingleTimePasser<Thread> sessionConfigurationThreadPasser,
            SingleTimePasser<GameConfiguration> gameConfigPasser) {
        this.menuScreenTransition = menuScreenTransition;
        this.followOn = followOn;
        this.menuScreenHistory = menuScreenHistory;
        this.sessionConfigurationThreadPasser = sessionConfigurationThreadPasser;
        this.gameConfigPasser = gameConfigPasser;

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        black = new javax.swing.JRadioButton();
        white = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        standard = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        reserveTime = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        timeAddedPerTurn = new javax.swing.JSpinner();
        fixedTurn = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        timePerTurn = new javax.swing.JSpinner();
        infinite = new javax.swing.JRadioButton();
        play = new javax.swing.JButton();
        back = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Name"));

        buttonGroup1.add(black);
        black.setSelected(true);
        black.setText("Black");
        black.setName(""); // NOI18N
        black.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blackActionPerformed(evt);
            }
        });

        buttonGroup1.add(white);
        white.setText("White");
        white.setName(""); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(black)
                    .addComponent(white))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(black)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(white))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Timer"));

        buttonGroup2.add(standard);
        standard.setSelected(true);
        standard.setText("Standard");
        standard.setName(""); // NOI18N
        standard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                standardActionPerformed(evt);
            }
        });

        jLabel1.setText("Reserve time(s)");

        reserveTime.setModel(new javax.swing.SpinnerNumberModel(300, 0, 3600, 10));

        jLabel2.setText("Time added per turn(s)");

        timeAddedPerTurn.setModel(new javax.swing.SpinnerNumberModel(20, 0, 360, 1));

        buttonGroup2.add(fixedTurn);
        fixedTurn.setText("Fixed turn time");
        fixedTurn.setName(""); // NOI18N
        fixedTurn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fixedTurnActionPerformed(evt);
            }
        });

        jLabel3.setText("Time per turn(s)");

        timePerTurn.setModel(new javax.swing.SpinnerNumberModel(20, 0, 360, 1));
        timePerTurn.setEnabled(false);

        buttonGroup2.add(infinite);
        infinite.setText("Infinite");
        infinite.setName(""); // NOI18N
        infinite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infiniteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(standard)
                    .addComponent(fixedTurn)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(timePerTurn))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(reserveTime, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(timeAddedPerTurn, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(infinite))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(standard)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reserveTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(timeAddedPerTurn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fixedTurn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(timePerTurn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(infinite)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        play.setText("Play");
        play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playActionPerformed(evt);
            }
        });

        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(play, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(80, 80, 80))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(back)
                    .addComponent(play))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void blackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blackActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_blackActionPerformed

    private void standardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_standardActionPerformed
        // TODO add your handling code here:
        reserveTime.setEnabled(true);
        timeAddedPerTurn.setEnabled(true);

        timePerTurn.setEnabled(false);
    }//GEN-LAST:event_standardActionPerformed

    private void fixedTurnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fixedTurnActionPerformed
        // TODO add your handling code here:
        reserveTime.setEnabled(false);
        timeAddedPerTurn.setEnabled(false);

        timePerTurn.setEnabled(true);
    }//GEN-LAST:event_fixedTurnActionPerformed

    private void infiniteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infiniteActionPerformed
        // TODO add your handling code here:
        reserveTime.setEnabled(false);
        timeAddedPerTurn.setEnabled(false);

        timePerTurn.setEnabled(false);
    }//GEN-LAST:event_infiniteActionPerformed

    private void playActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playActionPerformed
        // TODO add your handling code here:
        menuScreenTransition.transition(this, followOn);

        PlayerName myName;

        if (black.isSelected()) {
            myName = PlayerName.BLACK;
        } else {
            myName = PlayerName.WHITE;
        }

        Gomoku board = new GomokuImpl();

        GameTimer gameTimer;

        if (standard.isSelected()) {
            int reserveTimeInSeconds = (int) reserveTime.getValue();
            int reserveTimeInMilliseconds
                    = reserveTimeInSeconds * 1000;

            int timeAddedPerTurnInSeconds = (int) timeAddedPerTurn.getValue();
            int timeAddedPerTurnInMilliseconds
                    = timeAddedPerTurnInSeconds * 1000;

            Clock defaultClock = new SystemClock();

            gameTimer = new StandardGameTimer(defaultClock,
                    reserveTimeInMilliseconds, timeAddedPerTurnInMilliseconds);
        } else if (fixedTurn.isSelected()) {
            int turnLengthInSeconds = (int) timePerTurn.getValue();

            int turnLengthInMilliseconds = turnLengthInSeconds * 1000;

            Clock defaultClock = new SystemClock();

            gameTimer = new FixedTurnGameTimer(defaultClock,
                    turnLengthInMilliseconds);
        } else {
            gameTimer = new InfiniteGameTimer();
        }

        GameConfiguration gameConfiguration
                = new GameConfiguration(board, gameTimer, myName);

        gameConfigPasser.put(gameConfiguration);
    }//GEN-LAST:event_playActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        try {
            // TODO add your handling code here:
            Thread sessionConfigurationHandler = sessionConfigurationThreadPasser.take();
            sessionConfigurationHandler.interrupt();
            menuScreenTransition.transition(null, menuScreenHistory.pop());
        } catch (InterruptedException ex) {
            
        }
    }//GEN-LAST:event_backActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JRadioButton black;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JRadioButton fixedTurn;
    private javax.swing.JRadioButton infinite;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton play;
    private javax.swing.JSpinner reserveTime;
    private javax.swing.JRadioButton standard;
    private javax.swing.JSpinner timeAddedPerTurn;
    private javax.swing.JSpinner timePerTurn;
    private javax.swing.JRadioButton white;
    // End of variables declaration//GEN-END:variables
}
